{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport styles from './styles.css.js';\nconst InternalToggle = React.forwardRef((_a, ref) => {\n  var {\n      controlId,\n      checked,\n      name,\n      disabled,\n      readOnly,\n      children,\n      description,\n      ariaLabel,\n      ariaControls,\n      onFocus,\n      onBlur,\n      onChange,\n      __internalRootRef = null\n    } = _a,\n    rest = __rest(_a, [\"controlId\", \"checked\", \"name\", \"disabled\", \"readOnly\", \"children\", \"description\", \"ariaLabel\", \"ariaControls\", \"onFocus\", \"onBlur\", \"onChange\", \"__internalRootRef\"]);\n  const {\n    ariaDescribedby,\n    ariaLabelledby\n  } = useFormFieldContext(rest);\n  const baseProps = getBaseProps(rest);\n  const checkboxRef = useRef(null);\n  useForwardFocus(ref, checkboxRef);\n  return React.createElement(AbstractSwitch, Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    controlClassName: clsx(styles['toggle-control'], {\n      [styles['toggle-control-checked']]: checked,\n      [styles['toggle-control-disabled']]: disabled,\n      [styles['toggle-control-readonly']]: readOnly\n    }),\n    outlineClassName: styles.outline,\n    controlId: controlId,\n    disabled: disabled,\n    readOnly: readOnly,\n    label: children,\n    description: description,\n    descriptionBottomPadding: true,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    ariaControls: ariaControls,\n    nativeControl: nativeControlProps => React.createElement(\"input\", Object.assign({}, nativeControlProps, {\n      ref: checkboxRef,\n      type: \"checkbox\",\n      checked: checked,\n      name: name,\n      \"aria-disabled\": readOnly && !disabled ? 'true' : undefined,\n      onFocus: () => fireNonCancelableEvent(onFocus),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      // empty handler to suppress React controllability warning\n      onChange: () => {}\n    })),\n    onClick: () => {\n      var _a;\n      (_a = checkboxRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      fireNonCancelableEvent(onChange, {\n        checked: !checked\n      });\n    },\n    styledControl: /*Using span, not div for HTML validity*/\n    React.createElement(\"span\", {\n      className: clsx(styles['toggle-handle'], {\n        [styles['toggle-handle-checked']]: checked,\n        [styles['toggle-handle-disabled']]: disabled,\n        [styles['toggle-handle-readonly']]: readOnly\n      })\n    }),\n    __internalRootRef: __internalRootRef\n  }));\n});\nexport default InternalToggle;","map":{"version":3,"names":["React","useRef","clsx","getBaseProps","AbstractSwitch","useFormFieldContext","fireNonCancelableEvent","useForwardFocus","styles","InternalToggle","forwardRef","_a","ref","controlId","checked","name","disabled","readOnly","children","description","ariaLabel","ariaControls","onFocus","onBlur","onChange","__internalRootRef","rest","__rest","ariaDescribedby","ariaLabelledby","baseProps","checkboxRef","createElement","Object","assign","className","root","controlClassName","outlineClassName","outline","label","descriptionBottomPadding","nativeControl","nativeControlProps","type","undefined","onClick","current","focus","styledControl"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/toggle/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { ToggleProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\ntype InternalToggleProps = ToggleProps & InternalBaseComponentProps;\n\nconst InternalToggle = React.forwardRef<ToggleProps.Ref, InternalToggleProps>(\n  (\n    {\n      controlId,\n      checked,\n      name,\n      disabled,\n      readOnly,\n      children,\n      description,\n      ariaLabel,\n      ariaControls,\n      onFocus,\n      onBlur,\n      onChange,\n      __internalRootRef = null,\n      ...rest\n    },\n    ref\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    useForwardFocus(ref, checkboxRef);\n\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={clsx(styles['toggle-control'], {\n          [styles['toggle-control-checked']]: checked,\n          [styles['toggle-control-disabled']]: disabled,\n          [styles['toggle-control-readonly']]: readOnly,\n        })}\n        outlineClassName={styles.outline}\n        controlId={controlId}\n        disabled={disabled}\n        readOnly={readOnly}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        ariaControls={ariaControls}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            aria-disabled={readOnly && !disabled ? 'true' : undefined}\n            onFocus={() => fireNonCancelableEvent(onFocus)}\n            onBlur={() => fireNonCancelableEvent(onBlur)}\n            // empty handler to suppress React controllability warning\n            onChange={() => {}}\n          />\n        )}\n        onClick={() => {\n          checkboxRef.current?.focus();\n          fireNonCancelableEvent(onChange, { checked: !checked });\n        }}\n        styledControl={\n          /*Using span, not div for HTML validity*/\n          <span\n            className={clsx(styles['toggle-handle'], {\n              [styles['toggle-handle-checked']]: checked,\n              [styles['toggle-handle-disabled']]: disabled,\n              [styles['toggle-handle-readonly']]: readOnly,\n            })}\n          />\n        }\n        __internalRootRef={__internalRootRef}\n      />\n    );\n  }\n);\n\nexport default InternalToggle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}