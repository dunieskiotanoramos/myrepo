{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { SPLIT_PANEL_MIN_WIDTH } from '../split-panel';\nexport function computeHorizontalLayout({\n  navigationOpen,\n  navigationWidth,\n  placement,\n  minContentWidth,\n  activeDrawerSize,\n  splitPanelOpen,\n  splitPanelPosition,\n  splitPanelSize\n}) {\n  const contentPadding = 2 * 24; // space-xl\n  const activeNavigationWidth = navigationOpen ? navigationWidth : 0;\n  const resizableSpaceAvailable = Math.max(0, placement.inlineSize - minContentWidth - contentPadding - activeNavigationWidth);\n  const splitPanelForcedPosition = resizableSpaceAvailable - activeDrawerSize < SPLIT_PANEL_MIN_WIDTH;\n  const resolvedSplitPanelPosition = splitPanelForcedPosition ? 'bottom' : splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom';\n  const sideSplitPanelSize = resolvedSplitPanelPosition === 'side' && splitPanelOpen ? splitPanelSize !== null && splitPanelSize !== void 0 ? splitPanelSize : 0 : 0;\n  const maxSplitPanelSize = resizableSpaceAvailable - activeDrawerSize;\n  const maxDrawerSize = resizableSpaceAvailable - sideSplitPanelSize;\n  return {\n    splitPanelPosition: resolvedSplitPanelPosition,\n    splitPanelForcedPosition,\n    sideSplitPanelSize,\n    maxSplitPanelSize,\n    maxDrawerSize\n  };\n}\nexport function computeVerticalLayout({\n  topOffset,\n  hasVisibleToolbar,\n  toolbarHeight,\n  stickyNotifications,\n  notificationsHeight\n}) {\n  const toolbar = topOffset;\n  let notifications = topOffset;\n  if (hasVisibleToolbar) {\n    notifications += toolbarHeight;\n  }\n  let header = notifications;\n  if (stickyNotifications) {\n    header += notificationsHeight;\n  }\n  return {\n    toolbar,\n    notifications,\n    header\n  };\n}","map":{"version":3,"names":["SPLIT_PANEL_MIN_WIDTH","computeHorizontalLayout","navigationOpen","navigationWidth","placement","minContentWidth","activeDrawerSize","splitPanelOpen","splitPanelPosition","splitPanelSize","contentPadding","activeNavigationWidth","resizableSpaceAvailable","Math","max","inlineSize","splitPanelForcedPosition","resolvedSplitPanelPosition","sideSplitPanelSize","maxSplitPanelSize","maxDrawerSize","computeVerticalLayout","topOffset","hasVisibleToolbar","toolbarHeight","stickyNotifications","notificationsHeight","toolbar","notifications","header"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/app-layout/visual-refresh-toolbar/compute-layout.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AppLayoutPropsWithDefaults } from '../interfaces';\nimport { SPLIT_PANEL_MIN_WIDTH } from '../split-panel';\n\ninterface HorizontalLayoutInput {\n  navigationOpen: boolean;\n  navigationWidth: number;\n  placement: AppLayoutPropsWithDefaults['placement'];\n  minContentWidth: number;\n  activeDrawerSize: number;\n  splitPanelOpen: boolean;\n  splitPanelPosition: 'side' | 'bottom' | undefined;\n  splitPanelSize: number;\n}\n\nexport function computeHorizontalLayout({\n  navigationOpen,\n  navigationWidth,\n  placement,\n  minContentWidth,\n  activeDrawerSize,\n  splitPanelOpen,\n  splitPanelPosition,\n  splitPanelSize,\n}: HorizontalLayoutInput) {\n  const contentPadding = 2 * 24; // space-xl\n  const activeNavigationWidth = navigationOpen ? navigationWidth : 0;\n\n  const resizableSpaceAvailable = Math.max(\n    0,\n    placement.inlineSize - minContentWidth - contentPadding - activeNavigationWidth\n  );\n\n  const splitPanelForcedPosition = resizableSpaceAvailable - activeDrawerSize < SPLIT_PANEL_MIN_WIDTH;\n  const resolvedSplitPanelPosition = splitPanelForcedPosition ? 'bottom' : splitPanelPosition ?? 'bottom';\n  const sideSplitPanelSize = resolvedSplitPanelPosition === 'side' && splitPanelOpen ? splitPanelSize ?? 0 : 0;\n  const maxSplitPanelSize = resizableSpaceAvailable - activeDrawerSize;\n  const maxDrawerSize = resizableSpaceAvailable - sideSplitPanelSize;\n\n  return {\n    splitPanelPosition: resolvedSplitPanelPosition,\n    splitPanelForcedPosition,\n    sideSplitPanelSize,\n    maxSplitPanelSize,\n    maxDrawerSize,\n  };\n}\n\ninterface VerticalLayoutInput {\n  topOffset: number;\n  hasVisibleToolbar: boolean;\n  toolbarHeight: number;\n  stickyNotifications: boolean;\n  notificationsHeight: number;\n}\n\nexport interface VerticalLayoutOutput {\n  toolbar: number;\n  notifications: number;\n  header: number;\n}\n\nexport function computeVerticalLayout({\n  topOffset,\n  hasVisibleToolbar,\n  toolbarHeight,\n  stickyNotifications,\n  notificationsHeight,\n}: VerticalLayoutInput): VerticalLayoutOutput {\n  const toolbar = topOffset;\n  let notifications = topOffset;\n  if (hasVisibleToolbar) {\n    notifications += toolbarHeight;\n  }\n  let header = notifications;\n  if (stickyNotifications) {\n    header += notificationsHeight;\n  }\n\n  return { toolbar, notifications, header };\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,qBAAqB,QAAQ,gBAAgB;AAatD,OAAM,SAAUC,uBAAuBA,CAAC;EACtCC,cAAc;EACdC,eAAe;EACfC,SAAS;EACTC,eAAe;EACfC,gBAAgB;EAChBC,cAAc;EACdC,kBAAkB;EAClBC;AAAc,CACQ;EACtB,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;EAC/B,MAAMC,qBAAqB,GAAGT,cAAc,GAAGC,eAAe,GAAG,CAAC;EAElE,MAAMS,uBAAuB,GAAGC,IAAI,CAACC,GAAG,CACtC,CAAC,EACDV,SAAS,CAACW,UAAU,GAAGV,eAAe,GAAGK,cAAc,GAAGC,qBAAqB,CAChF;EAED,MAAMK,wBAAwB,GAAGJ,uBAAuB,GAAGN,gBAAgB,GAAGN,qBAAqB;EACnG,MAAMiB,0BAA0B,GAAGD,wBAAwB,GAAG,QAAQ,GAAGR,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAI,QAAQ;EACvG,MAAMU,kBAAkB,GAAGD,0BAA0B,KAAK,MAAM,IAAIV,cAAc,GAAGE,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAI,CAAC,GAAG,CAAC;EAC5G,MAAMU,iBAAiB,GAAGP,uBAAuB,GAAGN,gBAAgB;EACpE,MAAMc,aAAa,GAAGR,uBAAuB,GAAGM,kBAAkB;EAElE,OAAO;IACLV,kBAAkB,EAAES,0BAA0B;IAC9CD,wBAAwB;IACxBE,kBAAkB;IAClBC,iBAAiB;IACjBC;GACD;AACH;AAgBA,OAAM,SAAUC,qBAAqBA,CAAC;EACpCC,SAAS;EACTC,iBAAiB;EACjBC,aAAa;EACbC,mBAAmB;EACnBC;AAAmB,CACC;EACpB,MAAMC,OAAO,GAAGL,SAAS;EACzB,IAAIM,aAAa,GAAGN,SAAS;EAC7B,IAAIC,iBAAiB,EAAE;IACrBK,aAAa,IAAIJ,aAAa;;EAEhC,IAAIK,MAAM,GAAGD,aAAa;EAC1B,IAAIH,mBAAmB,EAAE;IACvBI,MAAM,IAAIH,mBAAmB;;EAG/B,OAAO;IAAEC,OAAO;IAAEC,aAAa;IAAEC;EAAM,CAAE;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}