{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { useResize } from './use-resize';\nimport sharedStyles from '../../styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function AppLayoutDrawerImplementation({\n  appLayoutInternals\n}) {\n  var _a, _b, _c, _d;\n  const {\n    activeDrawer,\n    minDrawerSize,\n    activeDrawerSize,\n    maxDrawerSize,\n    ariaLabels,\n    drawers,\n    drawersFocusControl,\n    isMobile,\n    placement,\n    onActiveDrawerChange,\n    onActiveDrawerResize\n  } = appLayoutInternals;\n  const drawerRef = useRef(null);\n  const activeDrawerId = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;\n  const computedAriaLabels = {\n    closeButton: activeDrawer ? (_a = activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeDrawer ? (_b = activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  const isToolsDrawer = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === TOOLS_DRAWER_ID;\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const toolsContent = (_c = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _c === void 0 ? void 0 : _c.content;\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: drawersFocusControl.refs.slider,\n    onResize: size => onActiveDrawerResize({\n      id: activeDrawerId,\n      size\n    })\n  });\n  return React.createElement(\"aside\", {\n    id: activeDrawerId,\n    \"aria-hidden\": !activeDrawer,\n    \"aria-label\": computedAriaLabels.content,\n    className: clsx(styles.drawer, sharedStyles['with-motion'], {\n      [testutilStyles['active-drawer']]: !toolsOnlyMode && activeDrawerId,\n      [testutilStyles.tools]: isToolsDrawer\n    }),\n    ref: drawerRef,\n    onBlur: e => {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        drawersFocusControl.loseFocus();\n      }\n    },\n    style: {\n      blockSize: `calc(100vh - ${placement.insetBlockStart}px - ${placement.insetBlockEnd}px)`,\n      insetBlockStart: placement.insetBlockStart\n    }\n  }, !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && React.createElement(\"div\", {\n    className: styles['drawer-slider']\n  }, React.createElement(PanelResizeHandle, {\n    ref: drawersFocusControl.refs.slider,\n    position: \"side\",\n    className: testutilStyles['drawers-slider'],\n    ariaLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.resizeHandle,\n    ariaValuenow: resizeProps.relativeSize,\n    onKeyDown: resizeProps.onKeyDown,\n    onPointerDown: resizeProps.onPointerDown\n  })), React.createElement(\"div\", {\n    className: styles['drawer-content-container']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawer-close-button'])\n  }, React.createElement(InternalButton, {\n    ariaLabel: computedAriaLabels.closeButton,\n    className: clsx({\n      [testutilStyles['active-drawer-close-button']]: !isToolsDrawer && activeDrawerId,\n      [testutilStyles['tools-close']]: isToolsDrawer\n    }),\n    formAction: \"none\",\n    iconName: isMobile ? 'close' : 'angle-right',\n    onClick: () => onActiveDrawerChange(null),\n    ref: drawersFocusControl.refs.close,\n    variant: \"icon\"\n  })), toolsContent && React.createElement(\"div\", {\n    className: clsx(styles['drawer-content'], activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden'])\n  }, toolsContent), activeDrawerId !== TOOLS_DRAWER_ID && React.createElement(\"div\", {\n    className: styles['drawer-content']\n  }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content)));\n}\nexport const createWidgetizedAppLayoutDrawer = createWidgetizedComponent(AppLayoutDrawerImplementation);","map":{"version":3,"names":["React","useRef","clsx","InternalButton","PanelResizeHandle","createWidgetizedComponent","TOOLS_DRAWER_ID","useResize","sharedStyles","testutilStyles","styles","AppLayoutDrawerImplementation","appLayoutInternals","activeDrawer","minDrawerSize","activeDrawerSize","maxDrawerSize","ariaLabels","drawers","drawersFocusControl","isMobile","placement","onActiveDrawerChange","onActiveDrawerResize","drawerRef","activeDrawerId","id","computedAriaLabels","closeButton","_a","toolsClose","content","_b","drawerName","tools","isToolsDrawer","toolsOnlyMode","length","toolsContent","_c","find","drawer","resizeProps","currentWidth","minWidth","maxWidth","panelRef","handleRef","refs","slider","onResize","size","createElement","className","ref","onBlur","e","relatedTarget","currentTarget","contains","loseFocus","style","blockSize","insetBlockStart","insetBlockEnd","resizable","position","ariaLabel","_d","resizeHandle","ariaValuenow","relativeSize","onKeyDown","onPointerDown","formAction","iconName","onClick","close","variant","createWidgetizedAppLayoutDrawer"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/app-layout/visual-refresh-toolbar/drawer/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { AppLayoutInternals } from '../interfaces';\nimport { useResize } from './use-resize';\n\nimport sharedStyles from '../../styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface AppLayoutDrawerImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n}\n\nexport function AppLayoutDrawerImplementation({ appLayoutInternals }: AppLayoutDrawerImplementationProps) {\n  const {\n    activeDrawer,\n    minDrawerSize,\n    activeDrawerSize,\n    maxDrawerSize,\n    ariaLabels,\n    drawers,\n    drawersFocusControl,\n    isMobile,\n    placement,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n  } = appLayoutInternals;\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const activeDrawerId = activeDrawer?.id;\n\n  const computedAriaLabels = {\n    closeButton: activeDrawer ? activeDrawer.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeDrawer ? activeDrawer.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const isToolsDrawer = activeDrawer?.id === TOOLS_DRAWER_ID;\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const toolsContent = drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content;\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: drawersFocusControl.refs.slider,\n    onResize: size => onActiveDrawerResize({ id: activeDrawerId!, size }),\n  });\n\n  return (\n    <aside\n      id={activeDrawerId}\n      aria-hidden={!activeDrawer}\n      aria-label={computedAriaLabels.content}\n      className={clsx(styles.drawer, sharedStyles['with-motion'], {\n        [testutilStyles['active-drawer']]: !toolsOnlyMode && activeDrawerId,\n        [testutilStyles.tools]: isToolsDrawer,\n      })}\n      ref={drawerRef}\n      onBlur={e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          drawersFocusControl.loseFocus();\n        }\n      }}\n      style={{\n        blockSize: `calc(100vh - ${placement.insetBlockStart}px - ${placement.insetBlockEnd}px)`,\n        insetBlockStart: placement.insetBlockStart,\n      }}\n    >\n      {!isMobile && activeDrawer?.resizable && (\n        <div className={styles['drawer-slider']}>\n          <PanelResizeHandle\n            ref={drawersFocusControl.refs.slider}\n            position=\"side\"\n            className={testutilStyles['drawers-slider']}\n            ariaLabel={activeDrawer?.ariaLabels?.resizeHandle}\n            ariaValuenow={resizeProps.relativeSize}\n            onKeyDown={resizeProps.onKeyDown}\n            onPointerDown={resizeProps.onPointerDown}\n          />\n        </div>\n      )}\n      <div className={styles['drawer-content-container']}>\n        <div className={clsx(styles['drawer-close-button'])}>\n          <InternalButton\n            ariaLabel={computedAriaLabels.closeButton}\n            className={clsx({\n              [testutilStyles['active-drawer-close-button']]: !isToolsDrawer && activeDrawerId,\n              [testutilStyles['tools-close']]: isToolsDrawer,\n            })}\n            formAction=\"none\"\n            iconName={isMobile ? 'close' : 'angle-right'}\n            onClick={() => onActiveDrawerChange(null)}\n            ref={drawersFocusControl.refs.close}\n            variant=\"icon\"\n          />\n        </div>\n        {toolsContent && (\n          <div\n            className={clsx(\n              styles['drawer-content'],\n              activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']\n            )}\n          >\n            {toolsContent}\n          </div>\n        )}\n        {activeDrawerId !== TOOLS_DRAWER_ID && <div className={styles['drawer-content']}>{activeDrawer?.content}</div>}\n      </div>\n    </aside>\n  );\n}\n\nexport const createWidgetizedAppLayoutDrawer = createWidgetizedComponent(AppLayoutDrawerImplementation);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}