{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nimport { getFirstFocusable } from '../focus-lock/utils.js';\nimport styles from './styles.css.js';\nconst tokenSelector = `.${styles['list-item']}`;\nconst toggleButtonSelector = `.${styles.toggle}`;\nexport function useTokenFocusController({\n  moveFocusNextToIndex\n}) {\n  const tokenListRef = useRef(null);\n  useEffect(() => {\n    var _a, _b;\n    if (moveFocusNextToIndex === undefined || moveFocusNextToIndex === null || tokenListRef.current === null) {\n      return;\n    }\n    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);\n    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);\n    let closestPrevIndex = Number.NEGATIVE_INFINITY;\n    let closestNextIndex = Number.POSITIVE_INFINITY;\n    for (let activeIndex = 0; activeIndex < tokenElements.length; activeIndex++) {\n      if (activeIndex < moveFocusNextToIndex) {\n        closestPrevIndex = moveFocusNextToIndex - activeIndex < moveFocusNextToIndex - closestPrevIndex ? activeIndex : closestPrevIndex;\n      } else {\n        closestNextIndex = activeIndex - moveFocusNextToIndex < closestNextIndex - moveFocusNextToIndex ? activeIndex : closestNextIndex;\n      }\n    }\n    const nextElement = tokenElements[closestNextIndex];\n    const prevElement = tokenElements[closestPrevIndex];\n    if (nextElement instanceof HTMLElement) {\n      (_a = getFirstFocusable(nextElement)) === null || _a === void 0 ? void 0 : _a.focus();\n    } else if (prevElement instanceof HTMLElement) {\n      (_b = getFirstFocusable(prevElement)) === null || _b === void 0 ? void 0 : _b.focus();\n    } else if (toggleButton instanceof HTMLElement) {\n      toggleButton.focus();\n    }\n  }, [moveFocusNextToIndex]);\n  return tokenListRef;\n}","map":{"version":3,"names":["useEffect","useRef","getFirstFocusable","styles","tokenSelector","toggleButtonSelector","toggle","useTokenFocusController","moveFocusNextToIndex","tokenListRef","undefined","current","tokenElements","querySelectorAll","toggleButton","querySelector","closestPrevIndex","Number","NEGATIVE_INFINITY","closestNextIndex","POSITIVE_INFINITY","activeIndex","length","nextElement","prevElement","HTMLElement","_a","focus","_b"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/internal/components/token-list/token-focus-controller.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\nimport { getFirstFocusable } from '../focus-lock/utils.js';\n\nimport styles from './styles.css.js';\n\nconst tokenSelector = `.${styles['list-item']}`;\nconst toggleButtonSelector = `.${styles.toggle}`;\n\nexport function useTokenFocusController({ moveFocusNextToIndex }: { moveFocusNextToIndex?: null | number }) {\n  const tokenListRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (moveFocusNextToIndex === undefined || moveFocusNextToIndex === null || tokenListRef.current === null) {\n      return;\n    }\n\n    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);\n    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);\n\n    let closestPrevIndex = Number.NEGATIVE_INFINITY;\n    let closestNextIndex = Number.POSITIVE_INFINITY;\n\n    for (let activeIndex = 0; activeIndex < tokenElements.length; activeIndex++) {\n      if (activeIndex < moveFocusNextToIndex) {\n        closestPrevIndex =\n          moveFocusNextToIndex - activeIndex < moveFocusNextToIndex - closestPrevIndex ? activeIndex : closestPrevIndex;\n      } else {\n        closestNextIndex =\n          activeIndex - moveFocusNextToIndex < closestNextIndex - moveFocusNextToIndex ? activeIndex : closestNextIndex;\n      }\n    }\n\n    const nextElement = tokenElements[closestNextIndex];\n    const prevElement = tokenElements[closestPrevIndex];\n\n    if (nextElement instanceof HTMLElement) {\n      getFirstFocusable(nextElement)?.focus();\n    } else if (prevElement instanceof HTMLElement) {\n      getFirstFocusable(prevElement)?.focus();\n    } else if (toggleButton instanceof HTMLElement) {\n      toggleButton.focus();\n    }\n  }, [moveFocusNextToIndex]);\n\n  return tokenListRef;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,iBAAiB,QAAQ,wBAAwB;AAE1D,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,aAAa,GAAG,IAAID,MAAM,CAAC,WAAW,CAAC,EAAE;AAC/C,MAAME,oBAAoB,GAAG,IAAIF,MAAM,CAACG,MAAM,EAAE;AAEhD,OAAM,SAAUC,uBAAuBA,CAAC;EAAEC;AAAoB,CAA4C;EACxG,MAAMC,YAAY,GAAGR,MAAM,CAAiB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAK;;IACb,IAAIQ,oBAAoB,KAAKE,SAAS,IAAIF,oBAAoB,KAAK,IAAI,IAAIC,YAAY,CAACE,OAAO,KAAK,IAAI,EAAE;MACxG;;IAGF,MAAMC,aAAa,GAAGH,YAAY,CAACE,OAAO,CAACE,gBAAgB,CAACT,aAAa,CAAC;IAC1E,MAAMU,YAAY,GAAGL,YAAY,CAACE,OAAO,CAACI,aAAa,CAACV,oBAAoB,CAAC;IAE7E,IAAIW,gBAAgB,GAAGC,MAAM,CAACC,iBAAiB;IAC/C,IAAIC,gBAAgB,GAAGF,MAAM,CAACG,iBAAiB;IAE/C,KAAK,IAAIC,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGT,aAAa,CAACU,MAAM,EAAED,WAAW,EAAE,EAAE;MAC3E,IAAIA,WAAW,GAAGb,oBAAoB,EAAE;QACtCQ,gBAAgB,GACdR,oBAAoB,GAAGa,WAAW,GAAGb,oBAAoB,GAAGQ,gBAAgB,GAAGK,WAAW,GAAGL,gBAAgB;OAChH,MAAM;QACLG,gBAAgB,GACdE,WAAW,GAAGb,oBAAoB,GAAGW,gBAAgB,GAAGX,oBAAoB,GAAGa,WAAW,GAAGF,gBAAgB;;;IAInH,MAAMI,WAAW,GAAGX,aAAa,CAACO,gBAAgB,CAAC;IACnD,MAAMK,WAAW,GAAGZ,aAAa,CAACI,gBAAgB,CAAC;IAEnD,IAAIO,WAAW,YAAYE,WAAW,EAAE;MACtC,CAAAC,EAAA,GAAAxB,iBAAiB,CAACqB,WAAW,CAAC,cAAAG,EAAA,uBAAAA,EAAA,CAAEC,KAAK,EAAE;KACxC,MAAM,IAAIH,WAAW,YAAYC,WAAW,EAAE;MAC7C,CAAAG,EAAA,GAAA1B,iBAAiB,CAACsB,WAAW,CAAC,cAAAI,EAAA,uBAAAA,EAAA,CAAED,KAAK,EAAE;KACxC,MAAM,IAAIb,YAAY,YAAYW,WAAW,EAAE;MAC9CX,YAAY,CAACa,KAAK,EAAE;;EAExB,CAAC,EAAE,CAACnB,oBAAoB,CAAC,CAAC;EAE1B,OAAOC,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}