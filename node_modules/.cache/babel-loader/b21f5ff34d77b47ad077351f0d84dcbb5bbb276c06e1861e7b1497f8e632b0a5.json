{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { InternalButton } from '../../button/internal';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { useAppLayoutInternals } from './context';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport splitPanelTestUtilStyles from '../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    navigationOpen,\n    navigationHide,\n    isMobile\n  } = useAppLayoutInternals();\n  const isUnfocusable = hasDrawerViewportOverlay && navigationOpen && !navigationHide;\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: clsx(styles['drawers-container'], {\n      [styles['disable-body-scroll']]: disableBodyScroll,\n      [styles['has-open-drawer']]: hasOpenDrawer,\n      [styles.unfocusable]: isUnfocusable\n    })\n  }, React.createElement(SplitPanel.Side, null), React.createElement(ActiveDrawer, null), !isMobile && React.createElement(DesktopTriggers, null));\n}\nfunction ActiveDrawer() {\n  var _a, _b, _c, _d;\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    navigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMinWidth,\n    drawersMaxWidth,\n    drawerRef\n  } = useAppLayoutInternals();\n  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find(item => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || hasDrawerViewportOverlay && navigationOpen && !navigationHide;\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;\n  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);\n  return React.createElement(\"aside\", {\n    id: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : undefined,\n    \"aria-hidden\": isHidden,\n    \"aria-label\": computedAriaLabels.content,\n    className: clsx(styles.drawer, {\n      [styles['is-drawer-open']]: activeDrawerId,\n      [styles.unfocusable]: isUnfocusable,\n      [testutilStyles['active-drawer']]: activeDrawerId,\n      [testutilStyles.tools]: isToolsDrawer\n    }),\n    style: Object.assign({}, !isMobile && drawerSize && {\n      [customCssProps.drawerSize]: `${size}px`\n    }),\n    ref: drawerRef,\n    onBlur: e => {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        loseDrawersFocus();\n      }\n    }\n  }, !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && React.createElement(\"div\", {\n    className: styles['drawer-slider']\n  }, resizeHandle), React.createElement(\"div\", {\n    className: styles['drawer-content-container']\n  }, React.createElement(\"div\", {\n    className: styles['drawer-close-button']\n  }, React.createElement(InternalButton, {\n    ariaLabel: computedAriaLabels.closeButton,\n    className: clsx({\n      [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n      [testutilStyles['tools-close']]: isToolsDrawer\n    }),\n    formAction: \"none\",\n    iconName: isMobile ? 'close' : 'angle-right',\n    onClick: () => {\n      handleDrawersClick(activeDrawerId);\n      handleToolsClick(false);\n    },\n    ref: drawersRefs.close,\n    variant: \"icon\"\n  })), toolsContent && React.createElement(\"div\", {\n    className: clsx(styles['drawer-content'], activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden'])\n  }, toolsContent), activeDrawerId !== TOOLS_DRAWER_ID && React.createElement(\"div\", {\n    className: styles['drawer-content']\n  }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))));\n}\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize,\n    headerVariant\n  } = useAppLayoutInternals();\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers !== null && drawers !== void 0 ? drawers : undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"aside\", {\n    className: clsx(styles['drawers-desktop-triggers-container'], {\n      [styles['has-multiple-triggers']]: hasMultipleTriggers,\n      [styles['has-open-drawer']]: hasOpenDrawer\n    }),\n    \"aria-label\": drawersAriaLabel,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-trigger-content'], {\n      [styles['has-multiple-triggers']]: hasMultipleTriggers,\n      [styles['has-open-drawer']]: hasOpenDrawer\n    }),\n    role: \"toolbar\",\n    \"aria-orientation\": \"vertical\"\n  }, visibleItems.map(item => {\n    var _a;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: item.id === activeDrawerId,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => handleDrawersClick(item.id),\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      selected: item.id === activeDrawerId,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`,\n      highContrastHeader: headerVariant === 'high-contrast'\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    customTriggerBuilder: ({\n      onClick,\n      triggerRef,\n      ariaLabel,\n      ariaExpanded,\n      testUtilsClass\n    }) => React.createElement(TriggerButton, {\n      ref: triggerRef,\n      ariaLabel: ariaLabel,\n      ariaExpanded: ariaExpanded,\n      badge: overflowMenuHasBadge,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass),\n      iconName: \"ellipsis\",\n      onClick: onClick,\n      highContrastHeader: headerVariant === 'high-contrast'\n    }),\n    onItemClick: ({\n      detail\n    }) => {\n      handleDrawersClick(detail.id);\n    }\n  }), hasSplitPanel && splitPanelToggle.displayed && React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggle.ariaLabel,\n    ariaControls: splitPanelControlId,\n    ariaExpanded: !!isSplitPanelOpen,\n    className: clsx(styles['drawers-trigger'], splitPanelTestUtilStyles['open-button']),\n    iconName: \"view-vertical\",\n    onClick: () => handleSplitPanelClick(),\n    selected: hasSplitPanel && isSplitPanelOpen,\n    ref: splitPanelRefs.toggle,\n    highContrastHeader: headerVariant === 'high-contrast'\n  })));\n}\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay\n  } = useAppLayoutInternals();\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  if (!drawers) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"aside\", {\n    \"aria-hidden\": hasDrawerViewportOverlay,\n    className: clsx({\n      [styles.unfocusable]: hasDrawerViewportOverlay\n    }),\n    \"aria-label\": drawersAriaLabel,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: styles['drawers-mobile-triggers-container'],\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, visibleItems.map(item => {\n    var _a;\n    return React.createElement(InternalButton, {\n      ariaExpanded: item.id === activeDrawerId,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      disabled: hasDrawerViewportOverlay,\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      formAction: \"none\",\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      badge: item.badge,\n      key: item.id,\n      onClick: () => handleDrawersClick(item.id),\n      variant: \"icon\",\n      __nativeAttributes: {\n        'aria-haspopup': true,\n        'data-testid': `awsui-app-layout-trigger-${item.id}`\n      }\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    onItemClick: ({\n      detail\n    }) => handleDrawersClick(detail.id)\n  })));\n}","map":{"version":3,"names":["React","useRef","clsx","useContainerQuery","InternalButton","customCssProps","getLimitedValue","splitItems","OverflowMenu","TOOLS_DRAWER_ID","useAppLayoutInternals","SplitPanel","TriggerButton","splitPanelTestUtilStyles","testutilStyles","styles","Drawers","disableBodyScroll","drawers","drawersTriggerCount","hasDrawerViewportOverlay","hasOpenDrawer","navigationOpen","navigationHide","isMobile","isUnfocusable","createElement","className","unfocusable","Side","ActiveDrawer","DesktopTriggers","activeDrawerId","ariaLabels","drawersRefs","handleDrawersClick","handleToolsClick","loseDrawersFocus","resizeHandle","drawerSize","drawersMinWidth","drawersMaxWidth","drawerRef","activeDrawer","_a","find","item","id","computedAriaLabels","closeButton","_b","toolsClose","content","_c","drawerName","tools","isHidden","isToolsDrawer","toolsContent","_d","drawer","size","undefined","style","Object","assign","ref","onBlur","e","relatedTarget","currentTarget","contains","resizable","ariaLabel","formAction","iconName","onClick","close","variant","drawersAriaLabel","drawersOverflowAriaLabel","drawersOverflowWithBadgeAriaLabel","handleSplitPanelClick","isSplitPanelOpen","splitPanel","splitPanelControlId","splitPanelDisplayed","splitPanelPosition","splitPanelRefs","splitPanelToggle","splitPanelReportedHeaderHeight","splitPanelReportedSize","headerVariant","hasMultipleTriggers","hasSplitPanel","previousActiveDrawerId","containerHeight","triggersContainerRef","rect","contentBoxHeight","current","splitPanelHeight","getIndexOfOverflowItem","ITEM_HEIGHT","overflowSpot","index","Math","floor","splitPanelItem","displayed","visibleItems","overflowItems","overflowMenuHasBadge","badge","role","map","triggerButton","ariaExpanded","ariaControls","trigger","iconSvg","key","toggle","selected","testId","highContrastHeader","length","items","customTriggerBuilder","triggerRef","testUtilsClass","onItemClick","detail","MobileTriggers","disabled","__nativeAttributes"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/app-layout/visual-refresh/drawers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { InternalButton } from '../../button/internal';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { useAppLayoutInternals } from './context';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    navigationOpen,\n    navigationHide,\n    isMobile,\n  } = useAppLayoutInternals();\n\n  const isUnfocusable = hasDrawerViewportOverlay && navigationOpen && !navigationHide;\n\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(styles['drawers-container'], {\n        [styles['disable-body-scroll']]: disableBodyScroll,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n        [styles.unfocusable]: isUnfocusable,\n      })}\n    >\n      <SplitPanel.Side />\n      <ActiveDrawer />\n      {!isMobile && <DesktopTriggers />}\n    </div>\n  );\n}\n\nfunction ActiveDrawer() {\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    navigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMinWidth,\n    drawersMaxWidth,\n    drawerRef,\n  } = useAppLayoutInternals();\n\n  const activeDrawer = drawers?.find(item => item.id === activeDrawerId) ?? null;\n\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? activeDrawer?.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeDrawerId ? activeDrawer?.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || (hasDrawerViewportOverlay && navigationOpen && !navigationHide);\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content;\n\n  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);\n\n  return (\n    <aside\n      id={activeDrawerId ?? undefined}\n      aria-hidden={isHidden}\n      aria-label={computedAriaLabels.content}\n      className={clsx(styles.drawer, {\n        [styles['is-drawer-open']]: activeDrawerId,\n        [styles.unfocusable]: isUnfocusable,\n        [testutilStyles['active-drawer']]: activeDrawerId,\n        [testutilStyles.tools]: isToolsDrawer,\n      })}\n      style={{\n        ...(!isMobile && drawerSize && { [customCssProps.drawerSize]: `${size}px` }),\n      }}\n      ref={drawerRef}\n      onBlur={e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseDrawersFocus();\n        }\n      }}\n    >\n      {!isMobile && activeDrawer?.resizable && <div className={styles['drawer-slider']}>{resizeHandle}</div>}\n      <div className={styles['drawer-content-container']}>\n        <div className={styles['drawer-close-button']}>\n          <InternalButton\n            ariaLabel={computedAriaLabels.closeButton}\n            className={clsx({\n              [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n              [testutilStyles['tools-close']]: isToolsDrawer,\n            })}\n            formAction=\"none\"\n            iconName={isMobile ? 'close' : 'angle-right'}\n            onClick={() => {\n              handleDrawersClick(activeDrawerId);\n              handleToolsClick(false);\n            }}\n            ref={drawersRefs.close}\n            variant=\"icon\"\n          />\n        </div>\n        {toolsContent && (\n          <div\n            className={clsx(\n              styles['drawer-content'],\n              activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']\n            )}\n          >\n            {toolsContent}\n          </div>\n        )}\n        {activeDrawerId !== TOOLS_DRAWER_ID && (\n          <div className={styles['drawer-content']}>{activeDrawerId && activeDrawer?.content}</div>\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize,\n    headerVariant,\n  } = useAppLayoutInternals();\n\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const splitPanelHeight =\n    isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot =\n        activeDrawerId && isSplitPanelOpen\n          ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5\n          : (containerHeight - splitPanelHeight) / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers ?? undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      className={clsx(styles['drawers-desktop-triggers-container'], {\n        [styles['has-multiple-triggers']]: hasMultipleTriggers,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n      })}\n      aria-label={drawersAriaLabel}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: hasOpenDrawer,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"vertical\"\n      >\n        {visibleItems.map(item => {\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger.iconName}\n              iconSvg={item.trigger.iconSvg}\n              key={item.id}\n              onClick={() => handleDrawersClick(item.id)}\n              ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              highContrastHeader={headerVariant === 'high-contrast'}\n            />\n          );\n        })}\n\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => (\n              <TriggerButton\n                ref={triggerRef}\n                ariaLabel={ariaLabel}\n                ariaExpanded={ariaExpanded}\n                badge={overflowMenuHasBadge}\n                className={clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass)}\n                iconName=\"ellipsis\"\n                onClick={onClick}\n                highContrastHeader={headerVariant === 'high-contrast'}\n              />\n            )}\n            onItemClick={({ detail }) => {\n              handleDrawersClick(detail.id);\n            }}\n          />\n        )}\n        {hasSplitPanel && splitPanelToggle.displayed && (\n          <TriggerButton\n            ariaLabel={splitPanelToggle.ariaLabel}\n            ariaControls={splitPanelControlId}\n            ariaExpanded={!!isSplitPanelOpen}\n            className={clsx(styles['drawers-trigger'], splitPanelTestUtilStyles['open-button'])}\n            iconName=\"view-vertical\"\n            onClick={() => handleSplitPanelClick()}\n            selected={hasSplitPanel && isSplitPanelOpen}\n            ref={splitPanelRefs.toggle}\n            highContrastHeader={headerVariant === 'high-contrast'}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay,\n  } = useAppLayoutInternals();\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n\n  if (!drawers) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      aria-hidden={hasDrawerViewportOverlay}\n      className={clsx({\n        [styles.unfocusable]: hasDrawerViewportOverlay,\n      })}\n      aria-label={drawersAriaLabel}\n      role=\"region\"\n    >\n      <div className={styles['drawers-mobile-triggers-container']} role=\"toolbar\" aria-orientation=\"horizontal\">\n        {visibleItems.map(item => (\n          <InternalButton\n            ariaExpanded={item.id === activeDrawerId}\n            ariaLabel={item.ariaLabels?.triggerButton}\n            className={clsx(\n              styles['drawers-trigger'],\n              testutilStyles['drawers-trigger'],\n              item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n            )}\n            disabled={hasDrawerViewportOverlay}\n            ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n            formAction=\"none\"\n            iconName={item.trigger.iconName}\n            iconSvg={item.trigger.iconSvg}\n            badge={item.badge}\n            key={item.id}\n            onClick={() => handleDrawersClick(item.id)}\n            variant=\"icon\"\n            __nativeAttributes={{ 'aria-haspopup': true, 'data-testid': `awsui-app-layout-trigger-${item.id}` }}\n          />\n        ))}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            onItemClick={({ detail }) => handleDrawersClick(detail.id)}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}