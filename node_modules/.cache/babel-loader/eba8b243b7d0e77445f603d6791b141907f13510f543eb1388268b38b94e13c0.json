{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { InternalBreadcrumbGroup } from '../../../breadcrumb-group/internal';\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { ToolbarSlot } from '../skeleton/slot-wrappers';\nimport { DrawerTriggers } from './drawer-triggers';\nimport TriggerButton from './trigger-button';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function AppLayoutToolbarImplementation({\n  appLayoutInternals,\n  toolbarProps\n}) {\n  var _a;\n  const {\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    verticalOffsets,\n    isMobile,\n    toolbarState,\n    setToolbarState,\n    setToolbarHeight\n  } = appLayoutInternals;\n  const {\n    ariaLabels,\n    activeDrawerId,\n    drawers,\n    drawersFocusRef,\n    onActiveDrawerChange,\n    hasNavigation,\n    navigationOpen,\n    navigationFocusRef,\n    onNavigationToggle,\n    hasSplitPanel,\n    splitPanelFocusRef,\n    splitPanelToggleProps,\n    onSplitPanelToggle\n  } = toolbarProps;\n  // TODO: expose configuration property\n  const pinnedToolbar = true;\n  const ref = useRef(null);\n  useResizeObserver(ref, entry => setToolbarHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    return () => {\n      setToolbarHeight(0);\n    };\n    // unmount effect only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    let lastScrollY = window.scrollY;\n    /* istanbul ignore next not testable in JSDOM */\n    const updateScrollDirection = () => {\n      if (pinnedToolbar) {\n        setToolbarState('show');\n        return;\n      }\n      const scrollY = window.scrollY;\n      // 80 is an arbitrary number to have a pause before the toolbar scrolls out of view at the top of the page\n      const direction = scrollY > lastScrollY && scrollY > 80 ? 'hide' : 'show';\n      // 2 as a buffer to avoid mistaking minor accidental mouse moves as scroll\n      if (direction !== toolbarState && (scrollY - lastScrollY > 2 || scrollY - lastScrollY < -2)) {\n        setToolbarState(direction);\n      }\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n    };\n    window.addEventListener('scroll', updateScrollDirection);\n    return () => {\n      window.removeEventListener('scroll', updateScrollDirection);\n    };\n  }, [pinnedToolbar, setToolbarState, toolbarState]);\n  const toolbarHidden = toolbarState === 'hide' && !pinnedToolbar;\n  return React.createElement(ToolbarSlot, {\n    ref: ref,\n    className: clsx(styles['universal-toolbar'], {\n      [testutilStyles['mobile-bar']]: isMobile,\n      [styles['toolbar-hidden']]: toolbarHidden\n    }),\n    style: {\n      insetBlockStart: toolbarHidden ? '-60px' : verticalOffsets.toolbar\n    }\n  }, React.createElement(\"div\", {\n    className: styles['toolbar-container']\n  }, hasNavigation && !navigationOpen && React.createElement(\"nav\", {\n    className: clsx(styles['universal-toolbar-nav'], testutilStyles['drawer-closed'])\n  }, React.createElement(TriggerButton, {\n    ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : undefined,\n    ariaExpanded: false,\n    iconName: \"menu\",\n    className: testutilStyles['navigation-toggle'],\n    onClick: () => onNavigationToggle === null || onNavigationToggle === void 0 ? void 0 : onNavigationToggle(true),\n    ref: navigationFocusRef,\n    selected: navigationOpen\n  })), (breadcrumbs || discoveredBreadcrumbs) && React.createElement(\"div\", {\n    className: clsx(styles['universal-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)\n  }, breadcrumbs, discoveredBreadcrumbs && React.createElement(InternalBreadcrumbGroup, Object.assign({}, discoveredBreadcrumbs))), (drawers && drawers.length > 0 || hasSplitPanel && (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed)) && React.createElement(\"span\", {\n    className: clsx(styles['universal-toolbar-drawers'])\n  }, React.createElement(DrawerTriggers, {\n    ariaLabels: ariaLabels,\n    activeDrawerId: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null,\n    drawers: drawers !== null && drawers !== void 0 ? drawers : [],\n    drawersFocusRef: drawersFocusRef,\n    onActiveDrawerChange: onActiveDrawerChange,\n    splitPanelToggleProps: (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed) ? splitPanelToggleProps : undefined,\n    splitPanelFocusRef: splitPanelFocusRef,\n    onSplitPanelToggle: onSplitPanelToggle\n  }))));\n}\nexport const createWidgetizedAppLayoutToolbar = createWidgetizedComponent(AppLayoutToolbarImplementation);","map":{"version":3,"names":["React","useEffect","useRef","clsx","useResizeObserver","InternalBreadcrumbGroup","createWidgetizedComponent","ToolbarSlot","DrawerTriggers","TriggerButton","testutilStyles","styles","AppLayoutToolbarImplementation","appLayoutInternals","toolbarProps","breadcrumbs","discoveredBreadcrumbs","verticalOffsets","isMobile","toolbarState","setToolbarState","setToolbarHeight","ariaLabels","activeDrawerId","drawers","drawersFocusRef","onActiveDrawerChange","hasNavigation","navigationOpen","navigationFocusRef","onNavigationToggle","hasSplitPanel","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","pinnedToolbar","ref","entry","borderBoxHeight","lastScrollY","window","scrollY","updateScrollDirection","direction","addEventListener","removeEventListener","toolbarHidden","createElement","className","style","insetBlockStart","toolbar","ariaLabel","_a","navigationToggle","undefined","ariaExpanded","iconName","onClick","selected","Object","assign","length","displayed","createWidgetizedAppLayoutToolbar"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nimport { InternalBreadcrumbGroup } from '../../../breadcrumb-group/internal';\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { AppLayoutProps } from '../../interfaces';\nimport { Focusable } from '../../utils/use-focus-control';\nimport { AppLayoutInternals } from '../interfaces';\nimport { ToolbarSlot } from '../skeleton/slot-wrappers';\nimport { DrawerTriggers, SplitPanelToggleProps } from './drawer-triggers';\nimport TriggerButton from './trigger-button';\n\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { SplitPanelToggleProps };\n\nexport interface ToolbarProps {\n  ariaLabels?: AppLayoutProps.Labels;\n  // navigation\n  hasNavigation?: boolean;\n  navigationOpen?: boolean;\n  onNavigationToggle?: (open: boolean) => void;\n  navigationFocusRef?: React.Ref<Focusable>;\n\n  // breadcrumbs\n  hasBreadcrumbsPortal?: boolean;\n\n  // split panel\n  hasSplitPanel?: boolean;\n  splitPanelToggleProps?: SplitPanelToggleProps;\n  splitPanelFocusRef?: React.Ref<Focusable>;\n  onSplitPanelToggle?: () => void;\n\n  // drawers\n  activeDrawerId?: string | null;\n  drawers?: ReadonlyArray<AppLayoutProps.Drawer>;\n  drawersFocusRef?: React.Ref<Focusable>;\n  onActiveDrawerChange?: (drawerId: string | null) => void;\n}\n\ninterface AppLayoutToolbarImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n  toolbarProps: ToolbarProps;\n}\n\nexport function AppLayoutToolbarImplementation({\n  appLayoutInternals,\n  toolbarProps,\n}: AppLayoutToolbarImplementationProps) {\n  const {\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    verticalOffsets,\n    isMobile,\n    toolbarState,\n    setToolbarState,\n    setToolbarHeight,\n  } = appLayoutInternals;\n  const {\n    ariaLabels,\n    activeDrawerId,\n    drawers,\n    drawersFocusRef,\n    onActiveDrawerChange,\n    hasNavigation,\n    navigationOpen,\n    navigationFocusRef,\n    onNavigationToggle,\n    hasSplitPanel,\n    splitPanelFocusRef,\n    splitPanelToggleProps,\n    onSplitPanelToggle,\n  } = toolbarProps;\n  // TODO: expose configuration property\n  const pinnedToolbar = true;\n  const ref = useRef<HTMLElement>(null);\n  useResizeObserver(ref, entry => setToolbarHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    return () => {\n      setToolbarHeight(0);\n    };\n    // unmount effect only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    let lastScrollY = window.scrollY;\n\n    /* istanbul ignore next not testable in JSDOM */\n    const updateScrollDirection = () => {\n      if (pinnedToolbar) {\n        setToolbarState('show');\n        return;\n      }\n      const scrollY = window.scrollY;\n      // 80 is an arbitrary number to have a pause before the toolbar scrolls out of view at the top of the page\n      const direction = scrollY > lastScrollY && scrollY > 80 ? 'hide' : 'show';\n      // 2 as a buffer to avoid mistaking minor accidental mouse moves as scroll\n      if (direction !== toolbarState && (scrollY - lastScrollY > 2 || scrollY - lastScrollY < -2)) {\n        setToolbarState(direction);\n      }\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n    };\n\n    window.addEventListener('scroll', updateScrollDirection);\n    return () => {\n      window.removeEventListener('scroll', updateScrollDirection);\n    };\n  }, [pinnedToolbar, setToolbarState, toolbarState]);\n\n  const toolbarHidden = toolbarState === 'hide' && !pinnedToolbar;\n\n  return (\n    <ToolbarSlot\n      ref={ref}\n      className={clsx(styles['universal-toolbar'], {\n        [testutilStyles['mobile-bar']]: isMobile,\n        [styles['toolbar-hidden']]: toolbarHidden,\n      })}\n      style={{\n        insetBlockStart: toolbarHidden ? '-60px' : verticalOffsets.toolbar,\n      }}\n    >\n      <div className={styles['toolbar-container']}>\n        {hasNavigation && !navigationOpen && (\n          <nav className={clsx(styles['universal-toolbar-nav'], testutilStyles['drawer-closed'])}>\n            <TriggerButton\n              ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n              ariaExpanded={false}\n              iconName=\"menu\"\n              className={testutilStyles['navigation-toggle']}\n              onClick={() => onNavigationToggle?.(true)}\n              ref={navigationFocusRef}\n              selected={navigationOpen}\n            />\n          </nav>\n        )}\n        {(breadcrumbs || discoveredBreadcrumbs) && (\n          <div className={clsx(styles['universal-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)}>\n            {breadcrumbs}\n            {discoveredBreadcrumbs && <InternalBreadcrumbGroup {...discoveredBreadcrumbs} />}\n          </div>\n        )}\n        {((drawers && drawers.length > 0) || (hasSplitPanel && splitPanelToggleProps?.displayed)) && (\n          <span className={clsx(styles['universal-toolbar-drawers'])}>\n            <DrawerTriggers\n              ariaLabels={ariaLabels}\n              activeDrawerId={activeDrawerId ?? null}\n              drawers={drawers ?? []}\n              drawersFocusRef={drawersFocusRef}\n              onActiveDrawerChange={onActiveDrawerChange}\n              splitPanelToggleProps={splitPanelToggleProps?.displayed ? splitPanelToggleProps : undefined}\n              splitPanelFocusRef={splitPanelFocusRef}\n              onSplitPanelToggle={onSplitPanelToggle}\n            />\n          </span>\n        )}\n      </div>\n    </ToolbarSlot>\n  );\n}\n\nexport const createWidgetizedAppLayoutToolbar = createWidgetizedComponent(AppLayoutToolbarImplementation);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}