{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { matchFilteringProperty, matchOperator, matchOperatorPrefix, removeOperator, trimStart } from './utils';\nexport const getQueryActions = (query, onChange, inputRef) => {\n  const {\n    tokens,\n    operation\n  } = query;\n  const fireOnChange = (tokens, operation) => fireNonCancelableEvent(onChange, {\n    tokens,\n    operation\n  });\n  const setToken = (index, newToken) => {\n    const newTokens = [...tokens];\n    if (newTokens && index < newTokens.length) {\n      newTokens[index] = newToken;\n    }\n    fireOnChange(newTokens, operation);\n  };\n  const removeToken = index => {\n    var _a;\n    const newTokens = tokens.filter((_, i) => i !== index);\n    fireOnChange(newTokens, operation);\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n      preventDropdown: true\n    });\n  };\n  const removeAllTokens = () => {\n    var _a;\n    fireOnChange([], operation);\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n      preventDropdown: true\n    });\n  };\n  const addToken = newToken => {\n    const newTokens = [...tokens];\n    newTokens.push(newToken);\n    fireOnChange(newTokens, operation);\n  };\n  const setOperation = newOperation => {\n    fireOnChange(tokens, newOperation);\n  };\n  return {\n    setToken,\n    removeToken,\n    removeAllTokens,\n    addToken,\n    setOperation\n  };\n};\nexport const getAllowedOperators = property => {\n  const {\n    operators = [],\n    defaultOperator\n  } = property;\n  const operatorOrder = ['=', '!=', ':', '!:', '^', '!^', '>=', '<=', '<', '>'];\n  const operatorSet = new Set([defaultOperator, ...operators]);\n  return operatorOrder.filter(op => operatorSet.has(op));\n};\n/*\n * parses the value of the filtering input to figure out the current step of entering the token:\n * - \"property\": means that a filter on a particular column is being added, with operator already finalized\n * - \"operator\": means that a filter on a particular column is being added, with operator not yet finalized\n * - \"free-text\": means that a \"free text\" token is being added\n */\nexport const parseText = (filteringText, filteringProperties, freeTextFiltering) => {\n  const property = matchFilteringProperty(filteringProperties, filteringText);\n  if (!property) {\n    if (!freeTextFiltering.disabled) {\n      // For free text filtering, we allow ! as a shortcut for !:\n      const freeTextOperators = freeTextFiltering.operators.indexOf('!:') >= 0 ? ['!', ...freeTextFiltering.operators] : freeTextFiltering.operators;\n      const operator = matchOperator(freeTextOperators, filteringText);\n      if (operator) {\n        return {\n          step: 'free-text',\n          operator: operator === '!' ? '!:' : operator,\n          value: removeOperator(filteringText, operator)\n        };\n      }\n    }\n    return {\n      step: 'free-text',\n      value: filteringText\n    };\n  }\n  const allowedOps = getAllowedOperators(property);\n  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);\n  const operator = matchOperator(allowedOps, trimStart(textWithoutProperty));\n  if (operator) {\n    return {\n      step: 'property',\n      property,\n      operator,\n      value: removeOperator(textWithoutProperty, operator)\n    };\n  }\n  const operatorPrefix = matchOperatorPrefix(allowedOps, trimStart(textWithoutProperty));\n  if (operatorPrefix !== null) {\n    return {\n      step: 'operator',\n      property,\n      operatorPrefix\n    };\n  }\n  return {\n    step: 'free-text',\n    value: filteringText\n  };\n};\nexport const getAllValueSuggestions = (filteringOptions, operator = '=', i18nStrings, customGroupsText) => {\n  var _a;\n  const defaultGroup = {\n    label: (_a = i18nStrings.groupValuesText) !== null && _a !== void 0 ? _a : '',\n    options: []\n  };\n  const customGroups = {};\n  filteringOptions.forEach(filteringOption => {\n    const property = filteringOption.property;\n    // given option refers to a non-existent filtering property\n    if (!property) {\n      return;\n    }\n    // this option's filtering property does not support current operator\n    if (getAllowedOperators(property).indexOf(operator) === -1) {\n      return;\n    }\n    if (property.propertyGroup && !customGroups[property.propertyGroup]) {\n      const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === property.propertyGroup ? customGroup.values : acc, '');\n      customGroups[property.propertyGroup] = {\n        label,\n        options: []\n      };\n    }\n    const propertyGroup = property.propertyGroup ? customGroups[property.propertyGroup] : defaultGroup;\n    propertyGroup.options.push({\n      value: property.propertyLabel + ' ' + (operator || '=') + ' ' + filteringOption.value,\n      label: filteringOption.label,\n      __labelPrefix: property.propertyLabel + ' ' + (operator || '=')\n    });\n  });\n  return [defaultGroup, ...Object.keys(customGroups).map(group => customGroups[group])];\n};\nconst filteringPropertyToAutosuggestOption = filteringProperty => ({\n  value: filteringProperty.propertyLabel,\n  label: filteringProperty.propertyLabel,\n  keepOpenOnSelect: true\n});\nexport function getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToOption) {\n  var _a;\n  const defaultGroup = {\n    label: (_a = i18nStrings.groupPropertiesText) !== null && _a !== void 0 ? _a : '',\n    options: []\n  };\n  const customGroups = {};\n  filteringProperties.forEach(filteringProperty => {\n    const {\n      propertyGroup\n    } = filteringProperty;\n    let optionsGroup = defaultGroup;\n    if (propertyGroup) {\n      if (!customGroups[propertyGroup]) {\n        const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === propertyGroup ? customGroup.properties : acc, '');\n        customGroups[propertyGroup] = {\n          options: [],\n          label\n        };\n      }\n      optionsGroup = customGroups[propertyGroup];\n    }\n    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));\n  });\n  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];\n  const customGroupsArray = Object.keys(customGroups).map(groupKey => customGroups[groupKey]);\n  return [...defaultGroupArray, ...customGroupsArray];\n}\nexport const getAutosuggestOptions = (parsedText, filteringProperties, filteringOptions, customGroupsText, i18nStrings) => {\n  switch (parsedText.step) {\n    case 'property':\n      {\n        const {\n          propertyLabel,\n          groupValuesLabel\n        } = parsedText.property;\n        const options = filteringOptions.filter(o => o.property === parsedText.property);\n        return {\n          filterText: parsedText.value,\n          options: [{\n            options: options.map(({\n              label,\n              value\n            }) => ({\n              value: propertyLabel + ' ' + parsedText.operator + ' ' + value,\n              label: label,\n              __labelPrefix: propertyLabel + ' ' + parsedText.operator\n            })),\n            label: groupValuesLabel\n          }]\n        };\n      }\n    case 'operator':\n      {\n        return {\n          filterText: parsedText.property.propertyLabel + ' ' + parsedText.operatorPrefix,\n          options: [...getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption), {\n            options: getAllowedOperators(parsedText.property).map(value => ({\n              value: parsedText.property.propertyLabel + ' ' + value + ' ',\n              label: parsedText.property.propertyLabel + ' ' + value,\n              description: operatorToDescription(value, i18nStrings),\n              keepOpenOnSelect: true\n            })),\n            label: i18nStrings.operatorsText\n          }]\n        };\n      }\n    case 'free-text':\n      {\n        const needsValueSuggestions = !!parsedText.value;\n        const needsPropertySuggestions = !(parsedText.step === 'free-text' && parsedText.operator === '!:');\n        return {\n          filterText: parsedText.value,\n          options: [...(needsPropertySuggestions ? getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption) : []), ...(needsValueSuggestions ? getAllValueSuggestions(filteringOptions, parsedText.operator, i18nStrings, customGroupsText) : [])]\n        };\n      }\n  }\n};\nexport const operatorToDescription = (operator, i18nStrings) => {\n  switch (operator) {\n    case '<':\n      return i18nStrings.operatorLessText;\n    case '<=':\n      return i18nStrings.operatorLessOrEqualText;\n    case '>':\n      return i18nStrings.operatorGreaterText;\n    case '>=':\n      return i18nStrings.operatorGreaterOrEqualText;\n    case ':':\n      return i18nStrings.operatorContainsText;\n    case '!:':\n      return i18nStrings.operatorDoesNotContainText;\n    case '=':\n      return i18nStrings.operatorEqualsText;\n    case '!=':\n      return i18nStrings.operatorDoesNotEqualText;\n    case '^':\n      return i18nStrings.operatorStartsWithText;\n    case '!^':\n      return i18nStrings.operatorDoesNotStartWithText;\n    // The line is ignored from coverage because it is not reachable.\n    // The purpose of it is to prevent TS errors if ComparisonOperator type gets extended.\n    /* istanbul ignore next */\n    default:\n      return '';\n  }\n};","map":{"version":3,"names":["fireNonCancelableEvent","matchFilteringProperty","matchOperator","matchOperatorPrefix","removeOperator","trimStart","getQueryActions","query","onChange","inputRef","tokens","operation","fireOnChange","setToken","index","newToken","newTokens","length","removeToken","filter","_","i","_a","current","focus","preventDropdown","removeAllTokens","addToken","push","setOperation","newOperation","getAllowedOperators","property","operators","defaultOperator","operatorOrder","operatorSet","Set","op","has","parseText","filteringText","filteringProperties","freeTextFiltering","disabled","freeTextOperators","indexOf","operator","step","value","allowedOps","textWithoutProperty","substring","propertyLabel","operatorPrefix","getAllValueSuggestions","filteringOptions","i18nStrings","customGroupsText","defaultGroup","label","groupValuesText","options","customGroups","forEach","filteringOption","propertyGroup","reduce","acc","customGroup","group","values","__labelPrefix","Object","keys","map","filteringPropertyToAutosuggestOption","filteringProperty","keepOpenOnSelect","getPropertySuggestions","filteringPropertyToOption","groupPropertiesText","optionsGroup","properties","defaultGroupArray","customGroupsArray","groupKey","getAutosuggestOptions","parsedText","groupValuesLabel","o","filterText","description","operatorToDescription","operatorsText","needsValueSuggestions","needsPropertySuggestions","operatorLessText","operatorLessOrEqualText","operatorGreaterText","operatorGreaterOrEqualText","operatorContainsText","operatorDoesNotContainText","operatorEqualsText","operatorDoesNotEqualText","operatorStartsWithText","operatorDoesNotStartWithText"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/property-filter/controller.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport { AutosuggestInputRef } from '../internal/components/autosuggest-input';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport {\n  ComparisonOperator,\n  GroupText,\n  I18nStrings,\n  InternalFilteringOption,\n  InternalFilteringProperty,\n  InternalFreeTextFiltering,\n  JoinOperation,\n  ParsedText,\n  Query,\n  Token,\n} from './interfaces';\nimport { matchFilteringProperty, matchOperator, matchOperatorPrefix, removeOperator, trimStart } from './utils';\n\nexport const getQueryActions = (\n  query: Query,\n  onChange: NonCancelableEventHandler<Query>,\n  inputRef: React.RefObject<AutosuggestInputRef>\n) => {\n  const { tokens, operation } = query;\n  const fireOnChange = (tokens: readonly Token[], operation: JoinOperation) =>\n    fireNonCancelableEvent(onChange, { tokens, operation });\n  const setToken = (index: number, newToken: Token) => {\n    const newTokens = [...tokens];\n    if (newTokens && index < newTokens.length) {\n      newTokens[index] = newToken;\n    }\n    fireOnChange(newTokens, operation);\n  };\n  const removeToken = (index: number) => {\n    const newTokens = tokens.filter((_, i) => i !== index);\n    fireOnChange(newTokens, operation);\n    inputRef.current?.focus({ preventDropdown: true });\n  };\n  const removeAllTokens = () => {\n    fireOnChange([], operation);\n    inputRef.current?.focus({ preventDropdown: true });\n  };\n  const addToken = (newToken: Token) => {\n    const newTokens = [...tokens];\n    newTokens.push(newToken);\n    fireOnChange(newTokens, operation);\n  };\n  const setOperation = (newOperation: JoinOperation) => {\n    fireOnChange(tokens, newOperation);\n  };\n  return {\n    setToken,\n    removeToken,\n    removeAllTokens,\n    addToken,\n    setOperation,\n  };\n};\n\nexport const getAllowedOperators = (property: InternalFilteringProperty): ComparisonOperator[] => {\n  const { operators = [], defaultOperator } = property;\n  const operatorOrder = ['=', '!=', ':', '!:', '^', '!^', '>=', '<=', '<', '>'] as const;\n  const operatorSet = new Set([defaultOperator, ...operators]);\n  return operatorOrder.filter(op => operatorSet.has(op));\n};\n\n/*\n * parses the value of the filtering input to figure out the current step of entering the token:\n * - \"property\": means that a filter on a particular column is being added, with operator already finalized\n * - \"operator\": means that a filter on a particular column is being added, with operator not yet finalized\n * - \"free-text\": means that a \"free text\" token is being added\n */\nexport const parseText = (\n  filteringText: string,\n  filteringProperties: readonly InternalFilteringProperty[],\n  freeTextFiltering: InternalFreeTextFiltering\n): ParsedText => {\n  const property = matchFilteringProperty(filteringProperties, filteringText);\n  if (!property) {\n    if (!freeTextFiltering.disabled) {\n      // For free text filtering, we allow ! as a shortcut for !:\n      const freeTextOperators =\n        freeTextFiltering.operators.indexOf('!:') >= 0\n          ? ['!', ...freeTextFiltering.operators]\n          : freeTextFiltering.operators;\n      const operator = matchOperator(freeTextOperators, filteringText);\n      if (operator) {\n        return {\n          step: 'free-text',\n          operator: operator === '!' ? '!:' : operator,\n          value: removeOperator(filteringText, operator),\n        };\n      }\n    }\n\n    return {\n      step: 'free-text',\n      value: filteringText,\n    };\n  }\n\n  const allowedOps = getAllowedOperators(property);\n\n  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);\n  const operator = matchOperator(allowedOps, trimStart(textWithoutProperty));\n  if (operator) {\n    return {\n      step: 'property',\n      property,\n      operator,\n      value: removeOperator(textWithoutProperty, operator),\n    };\n  }\n\n  const operatorPrefix = matchOperatorPrefix(allowedOps, trimStart(textWithoutProperty));\n  if (operatorPrefix !== null) {\n    return { step: 'operator', property, operatorPrefix };\n  }\n\n  return {\n    step: 'free-text',\n    value: filteringText,\n  };\n};\n\ninterface OptionGroup<T> {\n  label: string;\n  options: T[];\n}\n\nexport const getAllValueSuggestions = (\n  filteringOptions: readonly InternalFilteringOption[],\n  operator: ComparisonOperator | undefined = '=',\n  i18nStrings: I18nStrings,\n  customGroupsText: readonly GroupText[]\n) => {\n  const defaultGroup: OptionGroup<AutosuggestProps.Option> = {\n    label: i18nStrings.groupValuesText ?? '',\n    options: [],\n  };\n  const customGroups: { [K in string]: OptionGroup<AutosuggestProps.Option> } = {};\n  filteringOptions.forEach(filteringOption => {\n    const property = filteringOption.property;\n    // given option refers to a non-existent filtering property\n    if (!property) {\n      return;\n    }\n    // this option's filtering property does not support current operator\n    if (getAllowedOperators(property).indexOf(operator) === -1) {\n      return;\n    }\n    if (property.propertyGroup && !customGroups[property.propertyGroup]) {\n      const label = customGroupsText.reduce<string>(\n        (acc, customGroup) => (customGroup.group === property.propertyGroup ? customGroup.values : acc),\n        ''\n      );\n      customGroups[property.propertyGroup] = {\n        label,\n        options: [],\n      };\n    }\n    const propertyGroup = property.propertyGroup ? customGroups[property.propertyGroup] : defaultGroup;\n    propertyGroup.options.push({\n      value: property.propertyLabel + ' ' + (operator || '=') + ' ' + filteringOption.value,\n      label: filteringOption.label,\n      __labelPrefix: property.propertyLabel + ' ' + (operator || '='),\n    });\n  });\n  return [defaultGroup, ...Object.keys(customGroups).map(group => customGroups[group])];\n};\n\nconst filteringPropertyToAutosuggestOption = (filteringProperty: InternalFilteringProperty) => ({\n  value: filteringProperty.propertyLabel,\n  label: filteringProperty.propertyLabel,\n  keepOpenOnSelect: true,\n});\n\nexport function getPropertySuggestions<T>(\n  filteringProperties: readonly InternalFilteringProperty[],\n  customGroupsText: readonly GroupText[],\n  i18nStrings: I18nStrings,\n  filteringPropertyToOption: (filteringProperty: InternalFilteringProperty) => T\n) {\n  const defaultGroup: OptionGroup<T> = {\n    label: i18nStrings.groupPropertiesText ?? '',\n    options: [],\n  };\n  const customGroups: { [K in string]: OptionGroup<T> } = {};\n\n  filteringProperties.forEach(filteringProperty => {\n    const { propertyGroup } = filteringProperty;\n    let optionsGroup = defaultGroup;\n    if (propertyGroup) {\n      if (!customGroups[propertyGroup]) {\n        const label = customGroupsText.reduce<string>(\n          (acc, customGroup) => (customGroup.group === propertyGroup ? customGroup.properties : acc),\n          ''\n        );\n        customGroups[propertyGroup] = { options: [], label };\n      }\n      optionsGroup = customGroups[propertyGroup];\n    }\n    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));\n  });\n  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];\n  const customGroupsArray = Object.keys(customGroups).map(groupKey => customGroups[groupKey]);\n  return [...defaultGroupArray, ...customGroupsArray];\n}\n\nexport const getAutosuggestOptions = (\n  parsedText: ParsedText,\n  filteringProperties: readonly InternalFilteringProperty[],\n  filteringOptions: readonly InternalFilteringOption[],\n  customGroupsText: readonly GroupText[],\n  i18nStrings: I18nStrings\n) => {\n  switch (parsedText.step) {\n    case 'property': {\n      const { propertyLabel, groupValuesLabel } = parsedText.property;\n      const options = filteringOptions.filter(o => o.property === parsedText.property);\n      return {\n        filterText: parsedText.value,\n        options: [\n          {\n            options: options.map(({ label, value }) => ({\n              value: propertyLabel + ' ' + parsedText.operator + ' ' + value,\n              label: label,\n              __labelPrefix: propertyLabel + ' ' + parsedText.operator,\n            })),\n            label: groupValuesLabel,\n          },\n        ],\n      };\n    }\n    case 'operator': {\n      return {\n        filterText: parsedText.property.propertyLabel + ' ' + parsedText.operatorPrefix,\n        options: [\n          ...getPropertySuggestions(\n            filteringProperties,\n            customGroupsText,\n            i18nStrings,\n            filteringPropertyToAutosuggestOption\n          ),\n          {\n            options: getAllowedOperators(parsedText.property).map(value => ({\n              value: parsedText.property.propertyLabel + ' ' + value + ' ',\n              label: parsedText.property.propertyLabel + ' ' + value,\n              description: operatorToDescription(value, i18nStrings),\n              keepOpenOnSelect: true,\n            })),\n            label: i18nStrings.operatorsText,\n          },\n        ],\n      };\n    }\n    case 'free-text': {\n      const needsValueSuggestions = !!parsedText.value;\n      const needsPropertySuggestions = !(parsedText.step === 'free-text' && parsedText.operator === '!:');\n      return {\n        filterText: parsedText.value,\n        options: [\n          ...(needsPropertySuggestions\n            ? getPropertySuggestions(\n                filteringProperties,\n                customGroupsText,\n                i18nStrings,\n                filteringPropertyToAutosuggestOption\n              )\n            : []),\n          ...(needsValueSuggestions\n            ? getAllValueSuggestions(filteringOptions, parsedText.operator, i18nStrings, customGroupsText)\n            : []),\n        ],\n      };\n    }\n  }\n};\n\nexport const operatorToDescription = (operator: ComparisonOperator, i18nStrings: I18nStrings) => {\n  switch (operator) {\n    case '<':\n      return i18nStrings.operatorLessText;\n    case '<=':\n      return i18nStrings.operatorLessOrEqualText;\n    case '>':\n      return i18nStrings.operatorGreaterText;\n    case '>=':\n      return i18nStrings.operatorGreaterOrEqualText;\n    case ':':\n      return i18nStrings.operatorContainsText;\n    case '!:':\n      return i18nStrings.operatorDoesNotContainText;\n    case '=':\n      return i18nStrings.operatorEqualsText;\n    case '!=':\n      return i18nStrings.operatorDoesNotEqualText;\n    case '^':\n      return i18nStrings.operatorStartsWithText;\n    case '!^':\n      return i18nStrings.operatorDoesNotStartWithText;\n    // The line is ignored from coverage because it is not reachable.\n    // The purpose of it is to prevent TS errors if ComparisonOperator type gets extended.\n    /* istanbul ignore next */\n    default:\n      return '';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}