{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { isGroup, isGroupInteractive, isInteractive } from '../../internal/components/option/utils/filter-options';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { connectOptionsByValue } from './connect-options';\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n  statusType\n}) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  const isHighlightable = option => !!option && (useInteractiveGroups || option.type !== 'parent');\n  const filterRef = useRef(null);\n  const triggerRef = useRef(null);\n  const menuRef = useRef(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set());\n  const [{\n    highlightType,\n    highlightedOption,\n    highlightedIndex\n  }, {\n    moveHighlightWithKeyboard,\n    resetHighlightWithKeyboard,\n    setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard,\n    goHomeWithKeyboard,\n    goEndWithKeyboard\n  }] = useHighlightedOption({\n    options,\n    isHighlightable\n  });\n  const {\n    isOpen,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    openedWithKeyboard\n  } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue('');\n    }\n  });\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n  const selectOption = option => {\n    var _a;\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    }\n  };\n  const activeKeyDownHandler = useMenuKeyboard({\n    goUp: () => {\n      if (!useInteractiveGroups && (highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.type) === 'child' && highlightedIndex === 1 || highlightedIndex === 0) {\n        goEndWithKeyboard();\n        return;\n      }\n      moveHighlightWithKeyboard(-1);\n    },\n    goDown: () => {\n      if (highlightedIndex === options.length - 1) {\n        goHomeWithKeyboard();\n        return;\n      }\n      moveHighlightWithKeyboard(1);\n    },\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      var _a;\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    },\n    preventNativeSpace: !hasFilter\n  });\n  const triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: () => openDropdown(true),\n    goHome: goHomeWithKeyboard\n  });\n  const getDropdownProps = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined\n  });\n  const getTriggerProps = (disabled = false, autoFocus = false) => {\n    const triggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? hasFilter ? dialogId : menuId : undefined\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = event => {\n        var _a;\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n  const getFilterProps = () => {\n    if (!hasFilter) {\n      return {};\n    }\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId\n      }\n    };\n  };\n  const getMenuProps = () => {\n    const menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = option => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n  const getOptionProps = (option, index) => {\n    var _a;\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;\n    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    const optionProps = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate),\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index)\n    };\n    return optionProps;\n  };\n  const prevOpen = usePrevious(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {\n      if (openedWithKeyboard) {\n        highlightOptionWithKeyboard(__selectedOptions[0]);\n      } else {\n        setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]), true);\n      }\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, openedWithKeyboard, options, prevOpen, hasFilter]);\n  useEffect(() => {\n    var _a;\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef]);\n  useForwardFocus(externalRef, triggerRef);\n  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId\n  };\n}","map":{"version":3,"names":["useEffect","useRef","isGroup","isGroupInteractive","isInteractive","useHighlightedOption","getOptionId","useMenuKeyboard","useTriggerKeyboard","useOpenState","fireNonCancelableEvent","useForwardFocus","usePrevious","useUniqueId","connectOptionsByValue","useSelect","selectedOptions","updateSelectedOption","options","filteringType","onBlur","onFocus","externalRef","keepOpen","fireLoadItems","setFilteringValue","useInteractiveGroups","statusType","interactivityCheck","isHighlightable","option","type","filterRef","triggerRef","menuRef","hasFilter","activeRef","__selectedOptions","__selectedValuesSet","reduce","selectedValuesSet","item","value","add","Set","highlightType","highlightedOption","highlightedIndex","moveHighlightWithKeyboard","resetHighlightWithKeyboard","setHighlightedIndexWithMouse","highlightOptionWithKeyboard","goHomeWithKeyboard","goEndWithKeyboard","isOpen","openDropdown","closeDropdown","toggleDropdown","openedWithKeyboard","onOpen","onClose","handleFocus","handleBlur","hasSelectedOption","length","menuId","dialogId","highlightedOptionId","selectOption","optionToSelect","_a","current","focus","activeKeyDownHandler","goUp","goDown","goHome","goEnd","preventNativeSpace","triggerKeyDownHandler","getDropdownProps","dropdownContentId","dropdownContentRole","undefined","getTriggerProps","disabled","autoFocus","triggerProps","ref","ariaHasPopup","ariaControls","onMouseDown","event","preventDefault","onKeyDown","getFilterProps","onChange","detail","__onDelayedInput","__nativeAttributes","getMenuProps","menuProps","id","open","onMouseUp","itemIndex","onMouseMove","nativeAttributes","getGroupState","totalSelected","filter","has","hasSelected","allSelected","selected","indeterminate","getOptionProps","index","highlighted","groupState","indexOf","nextOption","isNextSelected","optionProps","key","prevOpen","preventScroll","highlightedGroupSelected","announceSelected","highlightOption"],"sources":["/Users/dootano/Desktop/thetekshow-demo-app/node_modules/src/select/utils/use-select.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject } from 'react';\nimport { useEffect, useRef } from 'react';\n\nimport { ButtonTriggerProps } from '../../internal/components/button-trigger';\nimport { DropdownProps } from '../../internal/components/dropdown/interfaces';\nimport { DropdownStatusProps } from '../../internal/components/dropdown-status';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { isGroup, isGroupInteractive, isInteractive } from '../../internal/components/option/utils/filter-options';\nimport { OptionsListProps } from '../../internal/components/options-list';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../internal/events';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { FilterProps } from '../parts/filter';\nimport { ItemProps } from '../parts/item';\nimport { connectOptionsByValue } from './connect-options';\n\nexport type MenuProps = Omit<OptionsListProps, 'children'> & { ref: React.RefObject<HTMLUListElement> };\nexport type GetOptionProps = (option: DropdownOption, index: number) => ItemProps;\n\ninterface UseSelectProps {\n  selectedOptions: ReadonlyArray<OptionDefinition>;\n  updateSelectedOption: (option: OptionDefinition) => void;\n  options: ReadonlyArray<DropdownOption>;\n  filteringType: string;\n  keepOpen?: boolean;\n  onBlur?: NonCancelableEventHandler;\n  onFocus?: NonCancelableEventHandler;\n  externalRef: React.Ref<any>;\n  fireLoadItems: (filteringText: string) => void;\n  setFilteringValue: (filteringText: string) => void;\n  useInteractiveGroups?: boolean;\n  statusType: DropdownStatusProps.StatusType;\n}\n\nexport interface SelectTriggerProps extends ButtonTriggerProps {\n  ref: RefObject<HTMLButtonElement>;\n}\n\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n  statusType,\n}: UseSelectProps) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  const isHighlightable = (option?: DropdownOption) => !!option && (useInteractiveGroups || option.type !== 'parent');\n\n  const filterRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLUListElement>(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet: Set<string>, item: OptionDefinition) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set<string>());\n  const [\n    { highlightType, highlightedOption, highlightedIndex },\n    {\n      moveHighlightWithKeyboard,\n      resetHighlightWithKeyboard,\n      setHighlightedIndexWithMouse,\n      highlightOptionWithKeyboard,\n      goHomeWithKeyboard,\n      goEndWithKeyboard,\n    },\n  ] = useHighlightedOption({ options, isHighlightable });\n\n  const { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue('');\n    },\n  });\n\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  const selectOption = (option?: DropdownOption) => {\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      triggerRef.current?.focus();\n      closeDropdown();\n    }\n  };\n\n  const activeKeyDownHandler = useMenuKeyboard({\n    goUp: () => {\n      if (\n        (!useInteractiveGroups && highlightedOption?.type === 'child' && highlightedIndex === 1) ||\n        highlightedIndex === 0\n      ) {\n        goEndWithKeyboard();\n        return;\n      }\n\n      moveHighlightWithKeyboard(-1);\n    },\n    goDown: () => {\n      if (highlightedIndex === options.length - 1) {\n        goHomeWithKeyboard();\n        return;\n      }\n\n      moveHighlightWithKeyboard(1);\n    },\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      triggerRef.current?.focus();\n      closeDropdown();\n    },\n    preventNativeSpace: !hasFilter,\n  });\n\n  const triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: () => openDropdown(true),\n    goHome: goHomeWithKeyboard,\n  });\n\n  const getDropdownProps: () => Pick<\n    DropdownProps,\n    'onFocus' | 'onBlur' | 'dropdownContentId' | 'dropdownContentRole'\n  > = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined,\n  });\n\n  const getTriggerProps = (disabled = false, autoFocus = false) => {\n    const triggerProps: SelectTriggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? (hasFilter ? dialogId : menuId) : undefined,\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = (event: CustomEvent) => {\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          triggerRef.current?.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n\n  const getFilterProps = (): Partial<FilterProps> => {\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId,\n      },\n    };\n  };\n\n  const getMenuProps = () => {\n    const menuProps: MenuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType,\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId,\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = (option: OptionGroup) => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected,\n    };\n  };\n\n  const getOptionProps = (option: DropdownOption, index: number) => {\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!groupState?.selected;\n    const nextOption = options[index + 1]?.option;\n    const isNextSelected =\n      !!nextOption && isGroup(nextOption)\n        ? getGroupState(nextOption).selected\n        : __selectedOptions.indexOf(options[index + 1]) > -1;\n\n    const optionProps: any = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!groupState?.indeterminate,\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index),\n    };\n\n    return optionProps;\n  };\n\n  const prevOpen = usePrevious<boolean>(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {\n      if (openedWithKeyboard) {\n        highlightOptionWithKeyboard(__selectedOptions[0]);\n      } else {\n        setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]), true);\n      }\n    }\n  }, [\n    isOpen,\n    __selectedOptions,\n    hasSelectedOption,\n    setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard,\n    openedWithKeyboard,\n    options,\n    prevOpen,\n    hasFilter,\n  ]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      activeRef.current?.focus({ preventScroll: true });\n    }\n  }, [isOpen, activeRef]);\n\n  useForwardFocus(externalRef, triggerRef as React.RefObject<HTMLElement>);\n  const highlightedGroupSelected =\n    !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected =\n    !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}