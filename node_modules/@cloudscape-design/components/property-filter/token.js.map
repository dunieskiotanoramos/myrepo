{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../src/property-filter/token.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useState } from 'react';\n\nimport { DropdownStatusProps } from '../internal/components/dropdown-status/interfaces';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport FilteringToken, { FilteringTokenRef } from './filtering-token';\nimport {\n  ComparisonOperator,\n  GroupText,\n  I18nStrings,\n  InternalFilteringOption,\n  InternalFilteringProperty,\n  InternalFreeTextFiltering,\n  InternalToken,\n  JoinOperation,\n  LoadItemsDetail,\n  Token,\n} from './interfaces';\nimport { TokenEditor } from './token-editor';\nimport { getFormattedToken } from './utils';\n\nimport styles from './styles.css.js';\n\ninterface TokenProps {\n  asyncProperties?: boolean;\n  asyncProps: DropdownStatusProps;\n  customGroupsText: readonly GroupText[];\n  disabled?: boolean;\n  freeTextFiltering: InternalFreeTextFiltering;\n  expandToViewport?: boolean;\n  filteringProperties: readonly InternalFilteringProperty[];\n  filteringOptions: readonly InternalFilteringOption[];\n  first?: boolean;\n  hideOperations?: boolean;\n  i18nStrings: I18nStrings;\n  onLoadItems?: NonCancelableEventHandler<LoadItemsDetail>;\n  operation: JoinOperation;\n  removeToken: () => void;\n  setOperation: (newOperation: JoinOperation) => void;\n  setToken: (newToken: Token) => void;\n  token: InternalToken;\n}\n\nexport const TokenButton = ({\n  token,\n  operation = 'and',\n  first,\n  removeToken,\n  setToken,\n  setOperation,\n  filteringProperties,\n  filteringOptions,\n  asyncProps,\n  onLoadItems,\n  i18nStrings,\n  asyncProperties,\n  hideOperations,\n  customGroupsText,\n  disabled,\n  freeTextFiltering,\n  expandToViewport,\n}: TokenProps) => {\n  const tokenRef = useRef<FilteringTokenRef>(null);\n  const externalToken = { ...token, propertyKey: token.property?.propertyKey };\n  const formattedToken = getFormattedToken(token);\n  const [temporaryToken, setTemporaryToken] = useState<InternalToken>(token);\n\n  return (\n    <FilteringToken\n      ref={tokenRef}\n      tokens={[\n        {\n          content: (\n            <span className={styles['token-trigger']}>\n              <TokenTrigger property={formattedToken.property} operator={token.operator} value={formattedToken.value} />\n            </span>\n          ),\n          ariaLabel: formattedToken.label,\n          dismissAriaLabel: i18nStrings?.removeTokenButtonAriaLabel?.(externalToken) ?? '',\n        },\n      ]}\n      showOperation={!first && !hideOperations}\n      operation={operation}\n      andText={i18nStrings.operationAndText ?? ''}\n      orText={i18nStrings.operationOrText ?? ''}\n      operationAriaLabel={i18nStrings.tokenOperatorAriaLabel ?? ''}\n      onChangeOperation={setOperation}\n      onDismissToken={removeToken}\n      disabled={disabled}\n      editorContent={\n        <TokenEditor\n          setToken={setToken}\n          filteringProperties={filteringProperties}\n          filteringOptions={filteringOptions}\n          temporaryToken={temporaryToken}\n          onChangeTemporaryToken={setTemporaryToken}\n          asyncProps={asyncProps}\n          onLoadItems={onLoadItems}\n          i18nStrings={i18nStrings}\n          asyncProperties={asyncProperties}\n          customGroupsText={customGroupsText}\n          freeTextFiltering={freeTextFiltering}\n          onDismiss={() => tokenRef.current?.closeEditor()}\n        />\n      }\n      editorHeader={i18nStrings.editTokenHeader ?? ''}\n      editorDismissAriaLabel={i18nStrings.dismissAriaLabel ?? ''}\n      editorExpandToViewport={!!expandToViewport}\n      onEditorOpen={() => setTemporaryToken(token)}\n      // The properties below are only relevant for grouped tokens that are not supported\n      // by the property filter component yet.\n      groupOperation={operation}\n      groupAriaLabel={''}\n      groupEditAriaLabel={''}\n      onChangeGroupOperation={() => {}}\n      hasGroups={false}\n    />\n  );\n};\n\nconst TokenTrigger = ({\n  property,\n  operator,\n  value,\n}: {\n  property?: string;\n  operator?: ComparisonOperator;\n  value: string;\n}) => {\n  if (property) {\n    property += ' ';\n  }\n  const freeTextContainsToken = operator === ':' && !property;\n  const operatorText = freeTextContainsToken ? '' : operator + ' ';\n  return (\n    <>\n      {property}\n      <span className={styles['token-operator']}>{operatorText}</span>\n      {value}\n    </>\n  );\n};\n"]}